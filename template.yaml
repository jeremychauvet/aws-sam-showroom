AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Function to get cost forecast.

Parameters:
  AppName:
    Type: String
    Description: Application name
  ClientDomains:
    Type: CommaDelimitedList
    Description: List of domains allowed to use this UserPool
  UserEmail:
    Type: String
    Description: Email of the first UserPool user.

Globals:
  Function:
    Timeout: 2
    MemorySize: 128
    Runtime: python3.8
    Tags: {'CreatedBy': 'AWS SAM', 'Environment': 'dev'}

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: live
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  CostForecastFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cost-forecast/
      Handler: app.handler
      Description: Function to get cost forecast.
      AutoPublishAlias: live
      Events:
        ApiEvent:
          Type: Api
          Properties:
              Path: /cost-forecast
              Method: get
              RestApiId: !Ref ApiGateway
              # Auth:
              #   Authorizer: MyCognitoAuth # OPTIONAL

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: CostForecastUserPoolClientName
      GenerateSecret: false # recommanded for web clients.
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit # Postman testing.
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      Description: Common users group
      Precedence: 0
      UserPoolId: !Ref UserPool

  FirstUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref UserEmail
      DesiredDeliveryMediums:
        - EMAIL 
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: !Ref UserEmail
      UserPoolId: !Ref UserPool

  AddFirstUserToUserGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref UserGroup
      Username: !Ref FirstUser
      UserPoolId: !Ref UserPool

Outputs:
  UserPoolId:
    Description: "User pool ID"
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AppName}:UserPoolId

  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref UserPoolClient

  AuthUrl:
    Description: "URL used for authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
